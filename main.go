package main

import (
	"cust-mobile-eu/rmqsreceiver"
	"cust-mobile-eu/controller"
        "cust-mobile-eu/database"

        "github.com/gin-gonic/gin"
        "github.com/prometheus/client_golang/prometheus"
        "github.com/prometheus/client_golang/prometheus/promhttp"

        log "github.com/sirupsen/logrus"

        swaggerFiles "github.com/swaggo/files"     // swagger embed files
        ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware

        "cust-mobile-eu/docs" // docs is generated by Swag CLI, you have to import it.
)

func init() {
        prometheus.MustRegister(rmqsreceiver.IdAccessCounter)

        if err := database.InitDB().Error; err != nil {
                log.Println("failed to connect db")
        }
        database.StartMigration()
}


// @title           Mobile Customer Portal System API - EU Market
// @version         1.0
// @description     This is Mobile Customer Portal System for EU Market .
func main() {

	//log.Println("Starting Receiver Service")
	//receiver := rmqsreceiver.Connect()
	
	receiver := rmqsreceiver.Connect("ProducedEU")
	go receiver.ReceiveMessage()

        router := gin.Default()

        // programmatically set swagger info
        docs.SwaggerInfo.Title = "Mobile Customer Portal System API - EU Market"
        docs.SwaggerInfo.Description = "This is a Mobile Customer Portal System API - EU Market"
        docs.SwaggerInfo.Version = "1.0"
        docs.SwaggerInfo.Host = "localhost:8082"
        //docs.SwaggerInfo.BasePath = "/v2"
        docs.SwaggerInfo.Schemes = []string{"http"}
        //docs.SwaggerInfo.Schemes = []string{"http", "https"}

        mainGroup := router.Group("/")
        {
                productsGroup := mainGroup.Group("/products")
                {
                        productsGroup.GET("", controller.ListProducts)
                }

                productGroup := mainGroup.Group("/product")
                {
                        productGroup.GET("/:id", controller.GetProduct)
                }

                prometheusGroup := mainGroup.Group("/metrics")
                {
                        prometheusGroup.GET("", gin.WrapH(promhttp.Handler()))
                }
        }

        // use ginSwagger middleware to serve the API docs
        router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
        router.Run(":8082")
}
